[h1]Module Development[/h1]

A module is a collection of files that add new functionality to the platform.  These files can function entirely in the background (e.g., small integration plugins) or include control panel interfaces and frontend modules.  They can also include database tables, session access, etc.

Third-party modules created by developers and standard modules included in the application share identical rights within the application.

Creating a module is simple and requires the following:

- A folder: /modules/[modulename]/
- A module definition and installation file: /modules/[modulename]/[modulename].php

Optionally, you can add the following:

- One or more model definition files at: /modules/[modulename]/models/[modelname]_model.php
- A control panel controller file at: /modules/[modulename]/controllers/admincp.php
- Other controller files (accessible via URL's) at: /modules/[modulename]/controllers/
- A views folder for control panel interface screens: /modules/[modulename]/views/
- Helper files in: /modules/[modulename]/helpers/
- Library files in: /modules/[modulename]/libraries/

Developers have access to all standard CodeIgniter libraries/helpers, as well as a number of additional libraries and helpers specific to this application.

For more information on these, check out the following reference files for commonly-used classes:

- Administration Form Library (AdminForm)
- Dataset Listing Library (Dataset)
- Notification Library (Notifications)
- Navigation Library (Navigation)
- Universal Links Model (Link_model)
- Settings Model (Settings_model)

Furthermore, in the frontend, developers have access to the Smarty API and are highly encouraged to use the included Smarty templating engine for displaying their web pages.

This documentation will cover each potential component of a module.


Module Definition & Installation File (/modules/[modulename]/[modulename].php)
----------------------------------------------------------------------------------------

This file has 3 main responsibilities:

1) Perform any installation or upgrade tasks, such as database table creation/modification, settings creation, and writeable folder creation.

2) Universal control preload operations such as displaying navigation items.  These occur upon each page load of the control panel.

3) Universal frontend preload operations such as adding Smarty template plugin folders.

First, we must define the class, mandatory variables, and class constructor (required by all modules):

[code]
class Modulename extends Module {
	var $version = '1.0';
	var $name = 'Module Name';
	
	function __construct {
		$this->active_module = $this->name;
		
		parent::__construct();
	}
}
[/code]

Here, we've specified the current module name as well as version.  We've also extended the Module class which handles much of the shared logic for modules.

The CodeIgniter superobject is now accessible within our module definition class at $this->CI.

NO OTHER CODE IS REQUIRED in the module definition, but few modules will be that simple.

For example, we may want to include some installation/upgrade logic with a method like so:

[code]
class Modulename extends Module {
	// ... variables and __construct() method ...
	
	/**
	* Update
	*
	* @param int $db_version The current version of the installed module and its database, if applicable
	*
	* @return int $version The updated version (i.e., the version of this module file)
	*/
	function update ($db_version) {
		if ($db_version < 1.0) {
			// this would be a fresh install, as it's less than 1.0
		}
		
		if ($db_version < 1.02) {
			// this second command is an upgrade, something to run only if they don't
			// already have version 1.02 installed
		}
		
		return $this->version;
	}
}
[/code]

Keep in mind that, if your module is in version 1.05 (for example), and you have 5 if statements performing separate operations, all 5 of these statements will be executed upon a fresh install.  You don't need to modify each one repeatedly adding the new logic.

Right now, our module defines itself and performs some installation/update logic.

We will now add a new item to the control panel navigation via a new method, admin_preload().  This method, if it exists, is run prior to any control panel screen running.

[code]
class Modulename extends Module {
	// ... variables, constructor, updator logic, etc...
	
	function admin_preload () {
		$this->CI->navigation->child_link('configuration',60,$this->name . ' Configuration',site_url('admincp/modulename/configuration'));
	}
}
[/code]

The single line in the admin_preload method above adds a new navigation link to the control panel as a sub-link of the "configuration" tab.  It's weight is "60" (i.e., it appears after something weighted 59 but before links weighted 61), has Module Name Configuration as its text, and links to /admincp/modulename/configuration.  Your module's control panel controller is always accessible at /admincp/modulename, and here we are specifying the configuration method within that controller.

Similarly to admin_preload, front_preload is executed prior to every page load in the frontend.  It's less commonly used than admin_preload, but can be useful when your module adds new Smarty template plugins or needs to attach a function to an application hook.

Here, we will say that we are adding a new folder filled with Smarty plugins in our module:

[code]
class Modulename extends Module {
	// ... all other module code ...
	
	function front_preload () {
		$this->CI->smarty->addPluginsDir(APPPATH . 'modules/modulename/template_plugins/');
	}
}
[/code]

Now, Smarty will look in this directory for function/block plugin files like function.your_plugin.php.


Model File(s) (/modules/modulename/models/your_model.php)
-------------------------------------------------------------------------

These model definition files are standard CodeIgniter model files.  They usually contain a series of methods used for creating, updating, and deleting database records related to your module. For more information on models, look at CodeIgniter's documentation.


Control Panel File (/modules/modulename/controllers/admincp.php)
-------------------------------------------------------------------------

If your module has at least one control panel screen, you must create this control panel controller file.  It then allows for control panel pages viewable at /admincp/modulename (this will automatically load the index method in your controller, e.g., your module's control panel home page) and /admincp/modulename/another_method (loads another_method in your controller).  All URL segments after this are passed as the first, second, third, (etc.) arguments to the specified method.

As a start, your control panel controller will include the following code:

[code]
class Admincp extends Admincp_Controller {
	function __construct()
	{
		parent::__construct();
				
		// sets the active navigation tab to "publish"
		// 	other options: storefront, members, reports, design, configuration
		// you can re-specify or change this within any method, as well
		$this->navigation->parent_active('publish');
	}
}
[/code]

You should also have an index method to be displayed at /admincp/modulename.

As for other methods, you can add as many as you would like.  These are standard CodeIgniter controllers so all CodeIgniter documentation applies.


Frontend Controller Files (/modules/modulename/controllers/)
-------------------------------------------------------------------------

Frontend controller files give you new frontend presences.  For example, the Publish module has a frontend controller called "content" which displays a piece of content retrieved via the content model.  Controller code is usually quite simple like this.

Frontend controllers automatically map to URL's.  For example, a controller called "test.php" is accessible at /modulename/test, and any methods inside of it are accessible at /modulename/test/method_name.

However, by tapping into the Universal Links model (Link_model), you can map any URL path (such as "/my/fake/url/path") to the module > controller > method of your choice.  The URL path will be passed to your method as it's first argument.  For example, in the Publish module, URL's like "/my_article" are mapped to publish (module) > content (controller) > view (method).  The content::view() method takes one argument, $url_path, and looks up the content in the database using this $url_path.

As a start, your frontend controller must extend the Front_Controller class and call it's parent's constructor:

[code]
class Any_controller_name extends Front_Controller {
	function __construct() {
		parent::__construct();
	}
}
[/code]

If a URL maps to your controller but the method is non-existent, a 404 error will be returned.  Also, within any of your methods, you can return a 404 error to the user like so:

[code]
class Any_controller_name extends Front_Controller {
	function __construct() {
		parent::__construct();
	}
	
	function view ($url_path) {
		$this->load->model('modulename/module_model.php');
		$item = $this->module_model->get_item($url_path);
		
		if (empty($item)) {
			// no such item exists with that URL
			return show_404($url_path);
		}
		
		// else show the item nicely with a page...
	}
}
[/code]

Frontend controllers will almost always assign variables and display templates with the Smarty template engine and API.  Click here for more information on Smarty.


Views, Helpers, and Libraries
-------------------------------------------------------------------------

These are all optional components of your module and also standard parts of the CodeIgniter framework.  They exist at the following folders (not required):

- /modules/modulename/views/
- /modules/modulename/helpers/
- /modules/modulename/libraries/

Views are most commonly used for control panel screens (frontend pages use the Smarty template engine).

Helpers are one-off function definitions that provide additional functionality.

Libraries are class files.

All 3 can be loaded via the load method on the CodeIgniter superobject (e.g., $this->CI->load() in module definition files, $this->load() in models/controllers).  More information is available in CodeIgniter documentation.