[h1]Plugin Development[/h1]

[h2]What are plugins?[/h2]

Plugins are single files of code that are dropped into the "plugins" folder.  Each plugin consists of one class with as many methods as you would like. These methods are executed after being bound to [developers/hooks](hooks) during the install process (the [span_code]update()[/span_code] method of the class).  Each plugin also has an [span_code]uninstall()[/span_code] method which removes these bindings.

All plugins could be turned into complete modules but, if you don't need an administration panel (besides Plugin settings), and you don't require any frontend controller files, library files, etc., a plugin is a simple way to add some functionality to [APPNAME].

[h2]Plugin File Structure[/h2]

At the very least, each plugin will have the following structure:

[code]
class Pluginname_plugin extends Plugin {
	$this->version = '1.0';
	$this->name = 'Pluginname';
	$this->description = 'Does what any good plugin should do.';

	function __construct() {
		parent::_construct();
		
		// now, we have the CodeIgniter superobject available at $this->CI.
	}
	
	function update ($db_version) {
		if ($db_version < '1.0') {
			// initial install
			// there's a nice method in the Plugin class which creates a simple install for us
			// based on the version, name, and description variables above
			$this->install_me();
			
			// this is also where we would bind some hooks
			// with $this->CI->app_hooks->bind();
		}
		
		// return the current version so we can save the version in the database and stop
		// perpetually running updates
		return $this->version;
	}
	
	function uninstall () {
		$this->uninstall_me();
		
		// if we created any bindings in the app_hooks library,
		// we should remove them here with $this->CI->app_hooks->unbind();
	}
}
[/code]