[h1]Template Plugins[/h1]

[APPNAME] offers a variety of template plugins that can be used throughout your template files to do things like retrieve content, access setting values, and generate proper URL's.

Developers can create their own template plugin functions or blocks and include them in their modules (or add them to the standard template plugin folder) at [filename]app/modules/yourmodule/template_plugins[/filename] (or similar folder).  Developers must specify this folder location as a local for template plugins in the front_preload() of their [developers/modules](module definition file) like so:

[code]
class Modulename extends Module {
	// ... all other module code ...
	
	function front_preload () {
		$this->CI->smarty->addPluginsDir(APPPATH . 'modules/yourmodule/template_plugins/');
	}
}
[/code]

Designers can also write/include template plugins directly in their theme package.  If the theme folder at [filename]themes/yourtheme[/filename] includes a folder called [filename]plugins[/filename], it will be scanned and used as a template plugin folder automatically.

[h2]Function Plugins vs. Block Plugins[/h2]

*Functions* are template plugins like [span_code]{setting name="site_name"}[/span_code].  They only include on tag and return a string of data (or empty string) upon their call.  Function plugin  are defined in files named [filename]function.yourfunction.php[/filename] and share a common function structure:

[code]
function smarty_function_yourfunction (array $params, object $smarty) {
	// function code
}
[/code]

More information on creating template functions can be found at [http://www.smarty.net](Smarty's documentation).

*Blocks* are template plugins that include an opening and closing tag, like:

[code]
{restricted in_group="3"}
This content is shown to those in group #3.
{/restricted}
[/code]

They, like function plugins, can be passed parameters which alter their execution.  However, unlike functions, you are also passed the content between the two tags and can manipulate it, return it, or discard it as you wish.

Block plugins are defined in files named [filename]block.yourblock.php[/filename] and share a common function structure:

[code]
function smarty_block_yourblock (array $params, string $tagdata, object $smarty, boolean $repeat){
	if (!$repeat) {		
		// do what you will with the $params array and $tagdata string
	}
}
[/code]

[h2]Accessing the CodeIgniter superobject[/h2]

Within template functions and blocks, you can access the CodeIgniter superobject (and all of its libraries, models, and methods) at [span_code]$smarty->CI[/code].  For example, to make a database call within a template plugin:

[code]
function smarty_function_myfunction ($params, $smarty) {
	$smarty->CI->db->select('my_id');
	$result = $smarty->CI->db->get('my_table');
	
	// etc...
}
[/code]