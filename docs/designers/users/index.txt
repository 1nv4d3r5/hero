[h2]Account Module[/h2]

[h2]Important URLs[/h2]

* [url]users/[/url] - Account Manager
* [url]users/register[/url] - Registration Form
* [url]users/login[/url] - Login Form
* [url]users/logout[/url] - Logout
* [url]users/forgot_password[/url] - Forgot Password Form

[h2]Specifying a Return URL during Login[/h2]

If you want to send users to the main login page at [url]users/login[/url] but have them sent back to a specific page when they have logged in, you can specify a return URL with the [span_code]return[/span_code] query string variable.

This variable must be encoded with the function [span_code]query_value_encode[/span_code].

Example:

[code]
<?php
// redirect to login page with specified URL
header('Location: ' . site_url('users/login?return=' . query_value_encode('my_relative_url')));
?>

This URL can also be absolute:

[code]
<?php
// redirect to login page with specified URL
header('Location: ' . site_url('users/login?return=' . query_value_encode('http://www.yahoo.com')));
?>
[/code]

[h2]Template Plugins[/h2]

[h3]login_form (parameters: var, return, username)[/h3]

Display a login form which (optionally) returns the user to a specified URL after a successful login.

Required variables:

* [span_code]var[/span_code] - The name of the variable for the array containing the returned template variables.

Optional variables:

* [span_code]return[/span_code] - The URL that you would like to return the user to after logging in.  Can be relative or absolute.
* [span_code]username[/span_code] - Value for the username field.  This is mainly for system use and would rarely be specified in your plugin calls.

Available block variables:

* [span_code]{$var.form_action}[/span_code] (the value for the form's "action" attribute")
* [span_code]{$var.return}[/span_code] (the encoded value for the hidden "return" field)
* [span_code]{$var.username}[/span_code] (the value to populate the username field - may be empty)

Example login form:

[code]
{login_form var="login" return=$return}
	<h1>Account Login</h1>
	<form method="post" action="{$login.form_action}">
		<input type="hidden" name="return" value="{$login.return}">
	
		<ul class="form">
			<li>
				<label for="username">Username/Email</label>
				<input type="text" id="username" name="username" value="{$login.username}">
			</li>
			<li>
				<label>Password</label>
				<input type="password" id="password" name="password" />
			</li>
			<li>
				<input type="checkbox" value="1" name="remember" /> Remember me for future visits?
			</li>
			<li>
				<input type="submit" name="login" value="Login" />
			</li>
		</ul>
		
		<ul class="login_form_links">
			<li>
				<a href="{url path="account/register?return={$login.return}">Don't have an account? Click here to register.</a>
			</li>
			<li>
				<a href="{url path="account/forgot_password"}">Forgot your password?</a>
			</li>
		</ul>
	</form>
{/login_form}
[/code]

[h3]register_form (parameters: var, return)[/h3]

Display a register form which (optionally) returns the user to a specified URL after a successful registration.

[note]If you are using custom fields in your registration form, you should set the [span_code]<form>[/span_code]'s [span_code]enctype[/span_code] attribute to "multipart/form-data".  This is necessary for the form to handle file uploads.[/note]

Required parameters:

* [span_code]var[/span_code] - The name of the variable for the array containing the returned template variables.

Optional variables:

* [span_code]return[/span_code] - The URL that you would like to return the user to after logging in.  Can be relative or absolute.

Available block variables:

* {$var.form_action} (the value for the form's "action" attribute")
* {$var.return} (the encoded value for the hidden "return" field)

[h3]members (parameters: var, id, username, name, email, limit, sort, sort_dir, offset, [any_custom_member_data_variable])[/h3]

Return one or more members in the format between the template tags.

Required parameters:

* [span_code]var[/span_code] - The name of the variable for the array containing the returned template variables.

Optional standard parameters:

* [span_code]id[/span_code] - The member ID
* [span_code]email[/span_code] - The email address of the user (may match multiple members because it's a search comparison)
* [span_code]username[/span_code] - Also a search comparison, matches the username.
* [span_code]name[/span_code] - Search member first and last names
* [span_code]group[/span_code] - Only return members who are in this group.

Other parameters:

* You can use any member data field name as a parameter.  For example, if you have a parameter called "School" with a database of field name, you can use a parameter "school" to filter the results.

Returns:

* Within the tags, each matching member is returned and outputted with the variable you specify in the [span_code]var[/span_code] parameter.
* Also, a [span_code]{$members_total_count}[/span_code] variable is available for the [span_code]{paginate}[/span_code] tag to do some pagination.

Example Usage:

[code]
<table class="table" cellpadding="0" cellspacing="0">
	<thead>
		<tr>
			<td style="width: 25%">Name</td>
			<td style="width: 20%">Company</td>
			<td style="width: 20%">School</td>
			<td style="width: 20%">Chapter</td>
			<td style="width: 15%">Date of Initiation</td>
		</tr>
	</thead>
	<tbody>
		{members var="member" group="3" sort="user_last_name" sort_dir="ASC" limit="100"}
			{assign var="member_id" value=$member.id}
			<tr>
				<td>
					<a href="{url path="members/profile/$member_id"}">{$member.last_name}, {$member.first_name}</a>
				</td>
				<td>
					{$member.company}
				</td>
				<td>
					{$member.school_name}
				</td>
				<td>
					{$member.chapter_name}
				</td>
				<td>
					{$member.year_of_initiation}
				</td>
			</tr>
		{/members}
	</tbody>
</table>

{paginate variable="page" base_url=$current_url total_rows=$members_total_count per_page="100"}
[/code]